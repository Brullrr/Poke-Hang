{"version":3,"sources":["PokemonHangman/Components/MyBattlePokemon/MyBattlePokemon.module.css","PokemonHangman/Components/LetterBank/LetterBank.module.css","PokemonHangman/Components/MyPokemon/MyPokemon.module.css","PokemonHangman/Components/EnemyBattlePokemon/EnemyBattlePokemon.module.css","PokemonHangman/Components/WordBox/WordBox.module.css","Pictures/Heart.png","Pictures/Ash.png","PokemonHangman/PokemonHangman.module.css","Pictures/Pokeball.png","Pictures/Beedrill.png","Pictures/Bulbasaur.png","Pictures/Charmander.png","Pictures/Growlithe.png","Pictures/Haunter.png","Pictures/Meowth.png","Pictures/Pidgeotto.png","Pictures/Pikachu.png","Pictures/Raticate.png","Pictures/Sandshrew.png","Pictures/Squirtle.png","PokemonHangman/Components/EnemyBattlePokemon/EnemyBattlePokemon.js","PokemonHangman/Reusables/AnswerWordsArray/AnswerWordsArray.js","PokemonHangman/Components/LetterBank/LetterBank.js","store/actionTypes/actionTypes.js","PokemonHangman/Components/MyBattlePokemon/MyBattlePokemon.js","PokemonHangman/Components/MyPokemon/MyPokemon.js","PokemonHangman/Components/WordBox/WordBox.js","PokemonHangman/PokemonHangman.js","App.js","serviceWorker.js","store/reducers/PokemonHolderReducer.js","store/reducers/currentNumberReducer.js","store/reducers/clickedLettersReducer.js","store/reducers/hitPointsReducer.js","index.js"],"names":["module","exports","connect","state","pokemonArray","pkmnhldrrdcr","props","source","forEach","element","control","pathway","className","classes","Container","Pokemon","src","alt","AnswerWords","clickedLetters","clckdlttrsrdcr","number","crrntnmbrrdcr","dispatch","letterClicked","letter","type","removeHeart","useDispatch","useSelector","e","join","includes","AnswerWordsArray","console","log","letterClickedHandler","Fire","alphabet","split","letterDivs","index","isClicked","ele","push","key","LetterClicked","onKeyDown","onClick","Letter","LetterBank","hitPoints","htpntsrdcr","killMyBattlePokemon","pokemon","battleSource","currentPokemon","hitPointsdivs","i","Heart","heart","Ash","HitPoints","map","MyPokemonArray","ImageDiv","Image","solved","AnswerWord","clickedLettersString","useEffect","isSolved","setTimeout","Solved","show","LetterBox","style","fontSize","PokemonHangman","useState","setLetter","document","addEventListener","PokemonHangmanBody","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","initialState","Pokeball","Beedrill","Bulbasaur","Charmander","Growlithe","Haunter","Meowth","Pidgeotto","Pikachu","Raticate","Sandshrew","Squirtle","reducer","action","pokemonArrayCopy","alivePokemonArray","pokemonArrayCopyd","wildPokemonArray","numberCopy","clickedLettersCopy","letterToAdd","concat","hitPointsCopy","rootReducer","combineReducers","PokemonHolderReducer","clickedLettersReducer","currentNumberReducer","hitPointsReducer","store","createStore","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.830ab4d6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"MyBattlePokemon_Container__1OSA3\",\"HitPoints\":\"MyBattlePokemon_HitPoints__7KN2c\",\"Heart\":\"MyBattlePokemon_Heart__2S0IJ\",\"Pokemon\":\"MyBattlePokemon_Pokemon__dfNBX\",\"Ash\":\"MyBattlePokemon_Ash__2ZbWK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LetterBank\":\"LetterBank_LetterBank__2smyF\",\"Letter\":\"LetterBank_Letter__xKcfb\",\"LetterClicked\":\"LetterBank_LetterClicked__Ktle5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"MyPokemon_Container__2Rz86\",\"ImageDiv\":\"MyPokemon_ImageDiv__algEC\",\"Image\":\"MyPokemon_Image__Uivya\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Pokemon\":\"EnemyBattlePokemon_Pokemon__2XKrs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"WordBox_Container__zS_24\",\"LetterBox\":\"WordBox_LetterBox__3RL-3\"};","module.exports = __webpack_public_path__ + \"static/media/Heart.ce5fd141.png\";","module.exports = __webpack_public_path__ + \"static/media/Ash.8867062b.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PokemonHangmanBody\":\"PokemonHangman_PokemonHangmanBody__3lm4w\"};","module.exports = __webpack_public_path__ + \"static/media/Pokeball.3c5b7682.png\";","module.exports = __webpack_public_path__ + \"static/media/Beedrill.9468f3d7.png\";","module.exports = __webpack_public_path__ + \"static/media/Bulbasaur.a6f7c0c3.png\";","module.exports = __webpack_public_path__ + \"static/media/Charmander.9a89e9f1.png\";","module.exports = __webpack_public_path__ + \"static/media/Growlithe.3c2322b2.png\";","module.exports = __webpack_public_path__ + \"static/media/Haunter.797c2316.png\";","module.exports = __webpack_public_path__ + \"static/media/Meowth.ebd64115.png\";","module.exports = __webpack_public_path__ + \"static/media/Pidgeotto.f60b96bc.png\";","module.exports = __webpack_public_path__ + \"static/media/Pikachu.5c69e45f.png\";","module.exports = __webpack_public_path__ + \"static/media/Raticate.84010aba.png\";","module.exports = __webpack_public_path__ + \"static/media/Sandshrew.d0b169f4.png\";","module.exports = __webpack_public_path__ + \"static/media/Squirtle.62d46639.png\";","import classes from './EnemyBattlePokemon.module.css';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nconst EnemyBattlePokemon = (props) => {\r\n\r\n    let source = null;\r\n\r\n    props.pokemonArray.forEach(element => element.control === 'wildCurrent' ? source = element.pathway : null);\r\n    return (\r\n        <div className={classes.Container}>\r\n            <img className={classes.Pokemon} src={source} alt=\"Wild Pokemon\"></img>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        pokemonArray: state.pkmnhldrrdcr.pokemonArray\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(EnemyBattlePokemon)","const AnswerWords = [\r\n    'reallylong',\r\n    'reallylong',\r\n    'reallylong',\r\n    'pencil',\r\n    'anotherword',\r\n    'shortword'\r\n]\r\n\r\nexport default AnswerWords","import classes from './LetterBank.module.css';\r\nimport React from 'react';\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport * as actionTypes from '../../../store/actionTypes/actionTypes';\r\nimport AnswerWordsArray from '../../Reusables/AnswerWordsArray/AnswerWordsArray';\r\n\r\n\r\nconst LetterBank = (props) => {\r\n\r\n    \r\n    const dispatch = useDispatch();\r\n    const clickedLetters = useSelector(state => state.clckdlttrsrdcr.clickedLetters);\r\n    const number = useSelector(state => state.crrntnmbrrdcr.number);      \r\n\r\n                    const letterClicked = (e) => {\r\n                        let included = !clickedLetters.join('').includes(e)\r\n            \r\n                        if(included) {\r\n                            \r\n                            dispatch({type: actionTypes.LETTER_CLICKED, letter: e})\r\n        \r\n                            if(!AnswerWordsArray[number].includes(e)) {\r\n                                dispatch({type: actionTypes.REMOVE_HEART})\r\n                            }\r\n                        } else {\r\n                            console.log('Not allowed')\r\n                        }\r\n                    }\r\n            \r\n                    const letterClickedHandler = (e) => {\r\n                            switch (e) {\r\n                    case 'a':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'b':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'c':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'd':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'e':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'f':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'g':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'h':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'i':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'j':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'k':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'l':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'm':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'n':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'o':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'p':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'q':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'r':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 's':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 't':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'u':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'v':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'w':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'x':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'y':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'z':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n            \r\n            \r\n                    default:\r\n                        console.log('[LetterBank]  Default Reached')\r\n                    break;\r\n                            }\r\n                    } \r\n                    \r\n\r\n                 \r\n                letterClickedHandler(props.Fire)\r\n            \r\n            \r\n\r\n\r\n    let alphabetMoto = 'abcdefghijklmnopqrstuvwxyz';\r\n    let alphabet = alphabetMoto.split('')\r\n    let letterDivs = [];\r\n\r\n    alphabet.forEach((element, index) => {\r\n        let isClicked = false\r\n\r\n        props.clickedLetters.forEach(ele => {\r\n            if(element === ele) {\r\n                isClicked = true\r\n            }\r\n        })\r\n\r\n        if(isClicked){\r\n            letterDivs.push(\r\n                <button key={alphabet[index]} className={classes.LetterClicked}>&nbsp;</button>\r\n            )\r\n        } else {\r\n            letterDivs.push(\r\n                <button key={alphabet[index]} onKeyDown={(e) => letterClickedHandler(e.key)} onClick={() => letterClickedHandler(element)} className={classes.Letter}>{element}</button>\r\n            )\r\n        }\r\n        \r\n    });\r\n\r\n    return (\r\n        <div className={classes.LetterBank}>\r\n            {letterDivs}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        clickedLetters: state.clckdlttrsrdcr.clickedLetters,\r\n        number: state.crrntnmbrrdcr.number\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        letterClicked: (letter) => dispatch({type: actionTypes.LETTER_CLICKED, letter: letter}),\r\n        removeHeart: () => dispatch({type: actionTypes.REMOVE_HEART})\r\n    } \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LetterBank)","export const LETTER_CLICKED = \"LETTER_CLICKED\";\r\nexport const REMOVE_HEART = 'REMOVE_HEART';\r\nexport const KILL_MY_BATTLE_POKEMON = 'KILL_MY_BATTLE_POKEMON';\r\nexport const CHANGE_WORD = 'CHANGE_WORD';\r\n","import classes from './MyBattlePokemon.module.css';\r\nimport React from 'react';\r\nimport { connect} from 'react-redux';\r\nimport heart from '../../../Pictures/Heart.png';\r\nimport Ash from '../../../Pictures/Ash.png';\r\nimport * as actionTypes from '../../../store/actionTypes/actionTypes';\r\n\r\nconst MyBattlePokemon = (props) => {\r\n\r\n    let battleSource = null\r\n    let currentPokemon = null\r\n    props.pokemonArray.forEach(element => element.control === 'current' ? battleSource = element.pathway : null);\r\n    props.pokemonArray.forEach(element => element.control === 'current' ? currentPokemon = element.key : null)\r\n    let hitPointsdivs = []\r\n    for(let i=0; i<props.hitPoints;i++){\r\n        hitPointsdivs.push(\r\n            <img className={classes.Heart} src={heart} alt=\"Heart\" key={i} ></img>\r\n        )\r\n    }\r\n\r\n    if(props.hitPoints <=0){\r\n        props.killMyBattlePokemon(currentPokemon)\r\n    }\r\n    return (\r\n        <div className={classes.Container}>\r\n            <img className={classes.Ash} src={Ash} alt=\"ASH\"></img>\r\n            <div className={classes.HitPoints}>{hitPointsdivs.map(element => element)}</div>\r\n            <img src={battleSource} className={classes.Pokemon} alt=\"BattlePokemon\"></img>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToprops = state => {\r\n    return {\r\n        pokemonArray: state.pkmnhldrrdcr.pokemonArray,\r\n        hitPoints: state.htpntsrdcr.hitPoints\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        killMyBattlePokemon: (pokemon) => dispatch({type: actionTypes.KILL_MY_BATTLE_POKEMON, pokemon: pokemon })\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToprops, mapDispatchToProps)(MyBattlePokemon)","import classes from './MyPokemon.module.css';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux'\r\n\r\nconst MyPokemon = (props) => {\r\n    let MyPokemonArray = [];\r\n\r\n    props.pokemonArray.forEach(element => {\r\n        if(element.control === 'alive') {\r\n            MyPokemonArray.push(element)\r\n        }\r\n    });\r\n    return (\r\n        <div className={classes.Container}>\r\n            \r\n                {MyPokemonArray.map((element) => {\r\n                    return (\r\n                        <div key={element.key} className={classes.ImageDiv} >\r\n                            <img className={classes.Image} src={element.pathway} alt={element.pathway}></img>\r\n                        </div>\r\n                    )\r\n                })}\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        pokemonArray: state.pkmnhldrrdcr.pokemonArray\r\n    } \r\n}\r\n\r\nexport default connect(mapStateToProps)(MyPokemon)","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classes from './WordBox.module.css'\r\nimport AnswerWords from '../../Reusables/AnswerWordsArray/AnswerWordsArray';\r\nimport * as actionTypes from '../../../store/actionTypes/actionTypes';\r\n\r\nconst WordBox = (props) => {\r\n\r\n\r\n    let clickedLetters = props.clickedLetters\r\n\r\n    \r\n\r\n\r\n        \r\n\r\n    let AnswerWord = AnswerWords[props.number].split('')\r\n    let clickedLettersString = clickedLetters.join('')\r\n    \r\n    \r\n    useEffect(() => {\r\n        let isSolved = true\r\n\r\n    \r\n    AnswerWord.forEach((element) => {\r\n        if(!clickedLettersString.includes(element)) {\r\n            isSolved = false            \r\n        }\r\n    })\r\n\r\n    \r\n\r\n    if(isSolved) {\r\n        setTimeout(()=>{\r\n            props.solved();\r\n        }, 1000)\r\n        console.log('WORd Box Fired solve')\r\n        props.Solved();\r\n    }\r\n    })\r\n\r\n    return (\r\n        <div className={classes.Container}>\r\n            {AnswerWord.map((element, index) => {\r\n                let show = false\r\n                clickedLetters.forEach((ele) => {\r\n                    if(element.includes(ele)) {\r\n                        show = true\r\n                    }\r\n                })\r\n\r\n                return (\r\n                    <div key={element + index} className={classes.LetterBox} style={{\r\n                        fontSize: show ? \"40px\" : \"0px\" \r\n                    }}>\r\n                        {element}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        number: state.crrntnmbrrdcr.number,\r\n        clickedLetters: state.clckdlttrsrdcr.clickedLetters\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        solved: () => dispatch({type: actionTypes.CHANGE_WORD})\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WordBox)","import React, { Fragment, useState } from 'react';\r\nimport EnemyBattlePokemon from './Components/EnemyBattlePokemon/EnemyBattlePokemon';\r\nimport LetterBank from './Components/LetterBank/LetterBank';\r\nimport MyBattlePokemon from './Components/MyBattlePokemon/MyBattlePokemon';\r\nimport MyPokemon from './Components/MyPokemon/MyPokemon';\r\nimport WordBox from './Components/WordBox/WordBox';\r\nimport classes from './PokemonHangman.module.css';\r\n\r\n\r\n\r\nconst PokemonHangman = () => {\r\n\r\n    const [letter, setLetter] = useState('')\r\n    let fireHandler = (e) => {\r\n        setLetter(e.key)\r\n    } \r\n    document.addEventListener('keypress', fireHandler)\r\n    \r\n    let solved = () => {\r\n        setLetter('')\r\n    }\r\n    return (\r\n        <Fragment>\r\n           <div className={classes.PokemonHangmanBody}>\r\n                <MyPokemon />\r\n                <WordBox Solved={solved}/>\r\n                <MyBattlePokemon />\r\n                <EnemyBattlePokemon />\r\n                <LetterBank Fire={letter} />\r\n           </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default PokemonHangman","import React from 'react';\nimport './App.css';\nimport PokemonHangman from './PokemonHangman/PokemonHangman';\n\nfunction App() {\n  return (\n    <PokemonHangman />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actionTypes/actionTypes';\r\nimport Pokeball from '../../Pictures/Pokeball.png'\r\nimport Beedrill from '../../Pictures/Beedrill.png'\r\nimport Bulbasaur from '../../Pictures/Bulbasaur.png'\r\nimport Charmander from '../../Pictures/Charmander.png'\r\nimport Growlithe from '../../Pictures/Growlithe.png'\r\nimport Haunter from '../../Pictures/Haunter.png'\r\nimport Meowth from '../../Pictures/Meowth.png'\r\nimport Pidgeotto from '../../Pictures/Pidgeotto.png'\r\nimport Pikachu from '../../Pictures/Pikachu.png'\r\nimport Raticate from '../../Pictures/Raticate.png'\r\nimport Sandshrew from '../../Pictures/Sandshrew.png'\r\nimport Squirtle from '../../Pictures/Squirtle.png'\r\n\r\n\r\nconst initialState = {\r\n    pokemonArray: [\r\n        \r\n        {\r\n            pathway: Pokeball,\r\n            key: 'Pokeball',\r\n            control: 'dead'\r\n        },\r\n        {\r\n            pathway: Beedrill,\r\n            key: 'Beedrill',\r\n            control: 'wildCurrent'\r\n        },\r\n        {\r\n            pathway: Bulbasaur,\r\n            key: 'Bulbasaur',\r\n            control: 'alive'\r\n        },\r\n        {\r\n            pathway: Charmander,\r\n            key: 'Charmander',\r\n            control: 'current'\r\n        },\r\n        {\r\n            pathway: Growlithe,\r\n            key: 'Growlithe',\r\n            control: 'alive'\r\n        },\r\n        {\r\n            pathway: Haunter,\r\n            key: 'Haunter',\r\n            control: 'wild'\r\n        },\r\n        {\r\n            pathway: Meowth,\r\n            key: 'Meowth',\r\n            control: 'wild'\r\n        },\r\n        {\r\n            pathway: Pidgeotto,\r\n            key: 'Pidgeotto',\r\n            control: 'alive'\r\n        },\r\n        {\r\n            pathway: Pikachu,\r\n            key: 'Pikachu',\r\n            control: 'alive'\r\n        },\r\n        {\r\n            pathway: Raticate,\r\n            key: 'Raticate',\r\n            control: 'wild'\r\n        },\r\n        {\r\n            pathway: Sandshrew,\r\n            key: 'Sandshrew',\r\n            control: 'alive'\r\n        },\r\n        {\r\n            pathway: Squirtle,\r\n            key: 'Squirtle',\r\n            control: 'alive'\r\n        }\r\n    ]\r\n}\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.KILL_MY_BATTLE_POKEMON:\r\n            let pokemonArrayCopy = [...state.pokemonArray]\r\n            let alivePokemonArray = []\r\n             pokemonArrayCopy.forEach((element) => {\r\n                 if (element.key === action.pokemon) {\r\n                     element.control = 'dead'\r\n                 }\r\n                 if(element.control === 'alive') {\r\n                     alivePokemonArray.push(element)\r\n                 }\r\n             })\r\n\r\n             pokemonArrayCopy.forEach(element => {\r\n                 if(element.key === alivePokemonArray[0].key) {\r\n                     element.control = 'current'\r\n                 }\r\n             })\r\n\r\n            return {\r\n                ...state,\r\n                pokemonArray: pokemonArrayCopy\r\n            }\r\n        break;    \r\n\r\n        case actionTypes.CHANGE_WORD:\r\n            let pokemonArrayCopyd = [...state.pokemonArray]\r\n            let wildPokemonArray = []\r\n             pokemonArrayCopyd.forEach((element) => {\r\n                 if (element.control === 'wildCurrent') {\r\n                     element.control = 'alive'\r\n                 }\r\n                 if(element.control === 'wild') {\r\n                     wildPokemonArray.push(element)\r\n                 }\r\n             })\r\n\r\n             pokemonArrayCopyd.forEach(element => {\r\n                 if(element.key === wildPokemonArray[0].key) {\r\n                     element.control = 'wildCurrent'\r\n                 }\r\n             })\r\n\r\n            return {\r\n                ...state,\r\n                pokemonArray: pokemonArrayCopyd\r\n            }\r\n    \r\n        default:\r\n            break;\r\n    }\r\n    return state\r\n}\r\n\r\nexport default reducer","import * as actionTypes from '../actionTypes/actionTypes';\r\n\r\nconst initialState = {\r\n    number: 0\r\n}\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.CHANGE_WORD:\r\n            let numberCopy = state.number\r\n            numberCopy = numberCopy + 1\r\n            return {\r\n                ...state,\r\n                number: numberCopy\r\n            }\r\n    \r\n        default:\r\n            break;\r\n    }\r\n    return state\r\n}\r\n\r\nexport default reducer","import * as actionTypes from '../actionTypes/actionTypes';\r\n\r\nconst initialState = {\r\n    clickedLetters: []\r\n}\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.LETTER_CLICKED:\r\n                if(!state.clickedLetters.join('').includes(action.letter)) {\r\n                    let clickedLettersCopy = [...state.clickedLetters]\r\n                    let letterToAdd = [action.letter]\r\n                    clickedLettersCopy = clickedLettersCopy.concat(letterToAdd)\r\n                    console.log('[clickedLettersReducer] :' + clickedLettersCopy)\r\n                    return {\r\n                        ...state,\r\n                        clickedLetters: clickedLettersCopy\r\n                    }\r\n                }\r\n            break;\r\n        \r\n        case actionTypes.CHANGE_WORD:\r\n            return {\r\n                ...state,\r\n                clickedLetters: []\r\n            }\r\n        default:\r\n            break;\r\n    }\r\n    return state\r\n}\r\n\r\nexport default reducer","import * as actionTypes from '../actionTypes/actionTypes';\r\nconst initialState = {\r\n    hitPoints: 5\r\n}\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.REMOVE_HEART:\r\n\r\n                let hitPointsCopy = state.hitPoints - 1\r\n                console.log('[hitpointsarray] :   ' + hitPointsCopy)\r\n                return {\r\n                    ...state,\r\n                    hitPoints: hitPointsCopy\r\n                }\r\n        case actionTypes.KILL_MY_BATTLE_POKEMON:\r\n\r\n                return {\r\n                    ...state,\r\n                    hitPoints: 5\r\n                }\r\n    \r\n        default:\r\n            break;\r\n    }\r\n    return state\r\n}\r\n\r\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport PokemonHolderReducer from './store/reducers/PokemonHolderReducer';\nimport currentNumberReducer from './store/reducers/currentNumberReducer';\nimport clickedLettersReducer from './store/reducers/clickedLettersReducer';\nimport hitPointsReducer from './store/reducers/hitPointsReducer';\n\nconst rootReducer = combineReducers({\n  pkmnhldrrdcr: PokemonHolderReducer,\n  clckdlttrsrdcr: clickedLettersReducer,\n  crrntnmbrrdcr: currentNumberReducer,\n  htpntsrdcr: hitPointsReducer\n})\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} ><App /></Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}