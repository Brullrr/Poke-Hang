{"version":3,"sources":["PokemonHangman/Components/MyBattlePokemon/MyBattlePokemon.module.css","PokemonHangman/Components/EnemyBattlePokemon/EnemyBattlePokemon.module.css","PokemonHangman/PokemonHangman.module.css","Pictures/Pokeball.png","PokemonHangman/Components/LetterBank/LetterBank.module.css","PokemonHangman/Components/MyPokemon/MyPokemon.module.css","PokemonHangman/Components/WordBox/WordBox.module.css","Pictures/Fire.gif","Pictures/Leaf.gif","Pictures/Wind.gif","Pictures/Lightning.gif","Pictures/Ground.gif","Pictures/Water.gif","Pictures/Dragon.gif","Pictures/normal.gif","Pictures/Ghost.gif","Pictures/Heart.png","Pictures/Ash.png","Pictures/Victory.png","Pictures/Defeat.png","Pictures/Beedrill.png","Pictures/Bulbasaur.png","Pictures/Charmander.png","Pictures/Growlithe.png","Pictures/Haunter.png","Pictures/Meowth.png","Pictures/Pidgeotto.png","Pictures/Pikachu.png","Pictures/Raticate.png","Pictures/Sandshrew.png","Pictures/Squirtle.png","Pictures/Gyarados.png","Pictures/Dragonite.png","Pictures/Mewtwo.png","Pictures/Rhydon.png","PokemonHangman/Components/EnemyBattlePokemon/EnemyBattlePokemon.js","PokemonHangman/Reusables/AnswerWordsArray/AnswerWordsArray.js","PokemonHangman/Components/LetterBank/LetterBank.js","store/actionTypes/actionTypes.js","PokemonHangman/Components/MyBattlePokemon/MyBattlePokemon.js","PokemonHangman/Components/MyPokemon/MyPokemon.js","PokemonHangman/Components/WordBox/WordBox.js","PokemonHangman/PokemonHangman.js","App.js","serviceWorker.js","store/reducers/PokemonHolderReducer.js","store/reducers/currentNumberReducer.js","store/reducers/clickedLettersReducer.js","store/reducers/hitPointsReducer.js","store/reducers/wordChangingReducer.js","store/reducers/animationsReducer.js","index.js"],"names":["module","exports","connect","state","pokemonArray","pkmnhldrrdcr","isWildPokemonAttacking","nmtnsrdcr","wildPokemonAttackAnimation","isBeingAttacked","myPokemonAttackAnimation","props","source","forEach","element","control","pathway","attackSource","currentPokemon","push","type","FireBlast","RazorLeaf","Wind","Lightning","Ground","Water","Dragon","Normal","Ghost","console","log","className","classes","IsBeingAttacked","NotBeingAttacked","src","alt","Attack","AttackNot","PokemonAttacking","Pokemon","AnswerWords","clickedLetters","clckdlttrsrdcr","number","crrntnmbrrdcr","dispatch","letterClicked","letter","removeHeart","useDispatch","useSelector","e","join","includes","AnswerWordsArray","setTimeout","letterClickedHandler","Fire","alphabet","split","letterDivs","index","isClicked","ele","key","LetterClicked","onKeyDown","onClick","Letter","LetterBank","hitPoints","htpntsrdcr","isPokemonDying","killMyPokemonAnimation","killMyBattlePokemon","pokemon","resetDeathAnimation","isCapturing","captureWildPokemonAnimation","battleSource","hitPointsdivs","i","Heart","heart","useEffect","Container","AshHolder","Ash","pokeball","PokeballThrow","Pokeball","HitPoints","map","PokemonDying","MyPokemonArray","ImageDiv","Image","solved","wordWasChanged","capturePokemonAnimation","changeWildPokemon","AnswerWord","clickedLettersString","isSolved","show","LetterBox","style","fontSize","PokemonHangman","isWordChanging","wrdchngngrdcr","wildPokemonArray","alivePokemonArray","useState","setLetter","document","addEventListener","game","screenBleed","ScreenBleed","letterBankDiv","gameIsOngoing","PokemonHangmanBody","gameIsWon","Victory","gameIsLost","Defeat","length","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","initialState","Bulbasaur","Charmander","Growlithe","Pidgeotto","Pikachu","Sandshrew","Squirtle","Meowth","Beedrill","Haunter","Raticate","Gyarados","Rhydon","Dragonite","Mewtwo","reducer","action","pokemonArrayCopy","pokemonArrayCopyd","numberCopy","clickedLettersCopy","letterToAdd","concat","hitPointsCopy","rootReducer","combineReducers","PokemonHolderReducer","clickedLettersReducer","currentNumberReducer","hitPointsReducer","wordChangingReducer","animationsReducer","store","createStore","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7906e8b7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"MyBattlePokemon_Container__1OSA3\",\"HitPoints\":\"MyBattlePokemon_HitPoints__7KN2c\",\"Heart\":\"MyBattlePokemon_Heart__2S0IJ\",\"Pokemon\":\"MyBattlePokemon_Pokemon__dfNBX\",\"PokemonDying\":\"MyBattlePokemon_PokemonDying__S19eR\",\"animate\":\"MyBattlePokemon_animate__2RSU6\",\"AshHolder\":\"MyBattlePokemon_AshHolder__1myT9\",\"Ash\":\"MyBattlePokemon_Ash__2ZbWK\",\"Pokeball\":\"MyBattlePokemon_Pokeball__33xFn\",\"PokeballThrow\":\"MyBattlePokemon_PokeballThrow__29m49\",\"throw\":\"MyBattlePokemon_throw__24cMp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NotBeingAttacked\":\"EnemyBattlePokemon_NotBeingAttacked__1zcje\",\"IsBeingAttacked\":\"EnemyBattlePokemon_IsBeingAttacked__3pbbX\",\"Pokemon\":\"EnemyBattlePokemon_Pokemon__2XKrs\",\"PokemonAttacking\":\"EnemyBattlePokemon_PokemonAttacking__3lGfQ\",\"attack\":\"EnemyBattlePokemon_attack__2W7Rt\",\"Attack\":\"EnemyBattlePokemon_Attack__3FioD\",\"AttackNot\":\"EnemyBattlePokemon_AttackNot__15SWX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PokemonHangmanBody\":\"PokemonHangman_PokemonHangmanBody__3lm4w\",\"Victory\":\"PokemonHangman_Victory__3K8DK\",\"Defeat\":\"PokemonHangman_Defeat__2XZAQ\",\"ScreenBleed\":\"PokemonHangman_ScreenBleed__2Tk9b\",\"bleed\":\"PokemonHangman_bleed__18xhb\"};","module.exports = __webpack_public_path__ + \"static/media/Pokeball.3c5b7682.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LetterBank\":\"LetterBank_LetterBank__2smyF\",\"Letter\":\"LetterBank_Letter__xKcfb\",\"LetterClicked\":\"LetterBank_LetterClicked__Ktle5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"MyPokemon_Container__2Rz86\",\"ImageDiv\":\"MyPokemon_ImageDiv__algEC\",\"Image\":\"MyPokemon_Image__Uivya\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"WordBox_Container__zS_24\",\"LetterBox\":\"WordBox_LetterBox__3RL-3\"};","module.exports = __webpack_public_path__ + \"static/media/Fire.7146674d.gif\";","module.exports = __webpack_public_path__ + \"static/media/Leaf.9d322161.gif\";","module.exports = __webpack_public_path__ + \"static/media/Wind.64fa7911.gif\";","module.exports = __webpack_public_path__ + \"static/media/Lightning.07f344b1.gif\";","module.exports = __webpack_public_path__ + \"static/media/Ground.b8ea4acc.gif\";","module.exports = __webpack_public_path__ + \"static/media/Water.ac397704.gif\";","module.exports = __webpack_public_path__ + \"static/media/Dragon.026d2c87.gif\";","module.exports = __webpack_public_path__ + \"static/media/normal.2810ce18.gif\";","module.exports = __webpack_public_path__ + \"static/media/Ghost.26c93fec.gif\";","module.exports = __webpack_public_path__ + \"static/media/Heart.ce5fd141.png\";","module.exports = __webpack_public_path__ + \"static/media/Ash.8867062b.png\";","module.exports = __webpack_public_path__ + \"static/media/Victory.d90e5f91.png\";","module.exports = __webpack_public_path__ + \"static/media/Defeat.3f769053.png\";","module.exports = __webpack_public_path__ + \"static/media/Beedrill.9468f3d7.png\";","module.exports = __webpack_public_path__ + \"static/media/Bulbasaur.f32fc976.png\";","module.exports = __webpack_public_path__ + \"static/media/Charmander.ca1e0530.png\";","module.exports = __webpack_public_path__ + \"static/media/Growlithe.3c2322b2.png\";","module.exports = __webpack_public_path__ + \"static/media/Haunter.797c2316.png\";","module.exports = __webpack_public_path__ + \"static/media/Meowth.ebd64115.png\";","module.exports = __webpack_public_path__ + \"static/media/Pidgeotto.d00ebb29.png\";","module.exports = __webpack_public_path__ + \"static/media/Pikachu.bfe8ea6d.png\";","module.exports = __webpack_public_path__ + \"static/media/Raticate.84010aba.png\";","module.exports = __webpack_public_path__ + \"static/media/Sandshrew.d0b169f4.png\";","module.exports = __webpack_public_path__ + \"static/media/Squirtle.677a2383.png\";","module.exports = __webpack_public_path__ + \"static/media/Gyarados.3cbc02fa.png\";","module.exports = __webpack_public_path__ + \"static/media/Dragonite.28aa5fc7.png\";","module.exports = __webpack_public_path__ + \"static/media/Mewtwo.b350bd4d.png\";","module.exports = __webpack_public_path__ + \"static/media/Rhydon.950c290f.png\";","import classes from './EnemyBattlePokemon.module.css';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport FireBlast from '../../../Pictures/Fire.gif'\r\nimport RazorLeaf from '../../../Pictures/Leaf.gif'\r\nimport Wind from '../../../Pictures/Wind.gif'\r\nimport Lightning from '../../../Pictures/Lightning.gif'\r\nimport Ground from '../../../Pictures/Ground.gif'\r\nimport Water from '../../../Pictures/Water.gif'\r\nimport Dragon from '../../../Pictures/Dragon.gif'\r\nimport Normal from '../../../Pictures/normal.gif'\r\nimport Ghost from '../../../Pictures/Ghost.gif'\r\n\r\n\r\nconst EnemyBattlePokemon = (props) => {\r\n\r\n    let source = null;\r\n\r\n    props.pokemonArray.forEach(element => element.control === 'wildCurrent' ? source = element.pathway : null);\r\n\r\n    let attackSource = null\r\n\r\n    if(props.isBeingAttacked) {\r\n        let currentPokemon = []\r\n        props.pokemonArray.forEach((element) => {\r\n            if(element.control === 'current') {\r\n                currentPokemon.push(element)\r\n            }\r\n        })\r\n        \r\n        switch (currentPokemon[0].type) {\r\n            case 'fire':\r\n                attackSource = FireBlast\r\n                break;\r\n                case 'grass':\r\n                attackSource = RazorLeaf\r\n                break;\r\n            case 'wind':\r\n            attackSource = Wind\r\n            break;\r\n            case 'electricity':\r\n            attackSource = Lightning\r\n            break;\r\n            case 'ground':\r\n            attackSource = Ground\r\n            break;\r\n            case 'water':\r\n            attackSource = Water\r\n            break;\r\n            case 'dragon':\r\n            attackSource = Dragon\r\n            break;\r\n            case 'normal':\r\n            attackSource = Normal\r\n            break;\r\n            case 'ghost':\r\n            attackSource = Ghost\r\n            break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    console.log(attackSource)\r\n    return (\r\n        <div className={props.isBeingAttacked ? classes.IsBeingAttacked : classes.NotBeingAttacked}>\r\n            <img src={attackSource} alt='attack' className={ props.isBeingAttacked ? classes.Attack : classes.AttackNot} />\r\n            <img className={ props.isWildPokemonAttacking ? classes.PokemonAttacking : classes.Pokemon} src={source} alt=\"Wild Pokemon\"></img>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        pokemonArray: state.pkmnhldrrdcr.pokemonArray,\r\n        isWildPokemonAttacking: state.nmtnsrdcr.wildPokemonAttackAnimation,\r\n        isBeingAttacked: state.nmtnsrdcr.myPokemonAttackAnimation\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(EnemyBattlePokemon)","const AnswerWords = [\r\n    'migratory',\r\n    'predator',\r\n    'education',\r\n    'physical',\r\n    'familiar',\r\n    'author',\r\n    'government',\r\n    'giraffe',\r\n]\r\n\r\nexport default AnswerWords","import classes from './LetterBank.module.css';\r\nimport React, { useEffect } from 'react';\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport * as actionTypes from '../../../store/actionTypes/actionTypes';\r\nimport AnswerWordsArray from '../../Reusables/AnswerWordsArray/AnswerWordsArray';\r\n\r\n\r\nconst LetterBank = (props) => {\r\n\r\n    \r\n    const dispatch = useDispatch();\r\n    const clickedLetters = useSelector(state => state.clckdlttrsrdcr.clickedLetters);\r\n    const number = useSelector(state => state.crrntnmbrrdcr.number);      \r\n\r\n                    const letterClicked = (e) => {\r\n                        let included = !clickedLetters.join('').includes(e)\r\n            \r\n                        if(included) {\r\n                            \r\n                            dispatch({type: actionTypes.LETTER_CLICKED, letter: e})\r\n        \r\n                            if(!AnswerWordsArray[number].includes(e)) {\r\n                                dispatch({type: actionTypes.REMOVE_HEART})\r\n                                dispatch({type: actionTypes.WILD_POKEMON_ATTACK_ANIMATION})\r\n                                setTimeout(()=>{\r\n                                    dispatch({type: actionTypes.RESET_WILD_POKEMON_ATTACK_ANIMATION})\r\n                                }, 2000)\r\n                            } \r\n                            if(AnswerWordsArray[number].includes(e)) {\r\n                                dispatch({type: actionTypes.MY_POKEMON_ATTACK_ANIMATION})\r\n                                setTimeout(()=>{\r\n                                    dispatch({type: actionTypes.RESET_MY_POKEMON_ATTACK_ANIMATION})\r\n                                }, 2000)\r\n                            } \r\n                        } else {\r\n                            console.log(' [LetterBank] Not allowed')\r\n                        }\r\n                    }\r\n            \r\n                    const letterClickedHandler = (e) => {\r\n                            switch (e) {\r\n                    case 'a':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'b':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'c':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'd':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'e':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'f':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'g':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'h':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'i':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'j':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'k':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'l':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'm':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'n':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'o':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'p':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'q':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'r':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 's':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 't':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'u':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'v':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'w':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'x':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'y':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n                    case 'z':\r\n                    \r\n                    letterClicked(e)\r\n                    break;\r\n            \r\n            \r\n                    default:\r\n                        console.log('[LetterBank]  Default Reached')\r\n                    break;\r\n                            }\r\n                    } \r\n                    \r\n\r\n                 \r\n                letterClickedHandler(props.Fire)\r\n                \r\n            \r\n            \r\n\r\n\r\n    let alphabetMoto = 'abcdefghijklmnopqrstuvwxyz';\r\n    let alphabet = alphabetMoto.split('')\r\n    let letterDivs = [];\r\n\r\n    alphabet.forEach((element, index) => {\r\n        let isClicked = false\r\n\r\n        props.clickedLetters.forEach(ele => {\r\n            if(element === ele) {\r\n                isClicked = true\r\n            }\r\n        })\r\n\r\n        if(isClicked){\r\n            letterDivs.push(\r\n                <button key={alphabet[index]} className={classes.LetterClicked}>&nbsp;</button>\r\n            )\r\n        } else {\r\n            letterDivs.push(\r\n                <button key={alphabet[index]} onKeyDown={(e) => letterClickedHandler(e.key)} onClick={() => letterClickedHandler(element)} className={classes.Letter}>{element}</button>\r\n            )\r\n        }\r\n        \r\n    });\r\n\r\n    return (\r\n        <div className={classes.LetterBank}>\r\n            {letterDivs}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        clickedLetters: state.clckdlttrsrdcr.clickedLetters,\r\n        number: state.crrntnmbrrdcr.number\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        letterClicked: (letter) => dispatch({type: actionTypes.LETTER_CLICKED, letter: letter}),\r\n        removeHeart: () => dispatch({type: actionTypes.REMOVE_HEART})\r\n    } \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LetterBank)","export const LETTER_CLICKED = \"LETTER_CLICKED\";\r\nexport const REMOVE_HEART = 'REMOVE_HEART';\r\nexport const KILL_MY_BATTLE_POKEMON = 'KILL_MY_BATTLE_POKEMON';\r\nexport const CHANGE_WORD = 'CHANGE_WORD';\r\nexport const WORD_CHANGED = 'WORD_CHANGED';\r\nexport const CHANGE_WILD_POKEMON = 'CHANGE_WILD_POKEMON';\r\n\r\n\r\nexport const CAPTURE_POKEMON_ANIMATION = 'CAPTURE_POKEMON_ANIMATION';\r\nexport const RESET_DEATH_ANIMATION = 'RESET_DEATH_ANIMATION';\r\n\r\nexport const MY_POKEMON_ATTACK_ANIMATION = 'MY_POKEMON_ATTACK_ANIMATION';\r\nexport const RESET_MY_POKEMON_ATTACK_ANIMATION = 'RESET_MY_POKEMON_ATTACK_ANIMATION';\r\nexport const WILD_POKEMON_ATTACK_ANIMATION = 'WILD_POKEMON_ATTACK_ANIMATION';\r\nexport const RESET_WILD_POKEMON_ATTACK_ANIMATION = 'RESET_WILD_POKEMON_ATTACK_ANIMATION';\r\n","import classes from './MyBattlePokemon.module.css';\r\nimport React, { useEffect } from 'react';\r\nimport { connect, useSelector} from 'react-redux';\r\nimport heart from '../../../Pictures/Heart.png';\r\nimport Ash from '../../../Pictures/Ash.png';\r\nimport * as actionTypes from '../../../store/actionTypes/actionTypes';\r\nimport pokeball from '../../../Pictures/Pokeball.png'\r\n\r\nconst MyBattlePokemon = (props) => {\r\n\r\n    const isCapturing = useSelector(state => state.nmtnsrdcr.captureWildPokemonAnimation)\r\n    let battleSource = null\r\n    let currentPokemon = null\r\n    props.pokemonArray.forEach(element => element.control === 'current' ? battleSource = element.pathway : null);\r\n    props.pokemonArray.forEach(element => element.control === 'current' ? currentPokemon = element.key : null)\r\n    let hitPointsdivs = []\r\n    for(let i=0; i<props.hitPoints;i++){\r\n        hitPointsdivs.push(\r\n            <img className={classes.Heart} src={heart} alt=\"Heart\" key={i} ></img>\r\n        )\r\n    }\r\n    \r\n\r\n    useEffect(()=>{\r\n        if(props.hitPoints <=0){\r\n            props.killMyBattlePokemon(currentPokemon)\r\n        }\r\n    })\r\n\r\n\r\n    if(props.isPokemonDying) {\r\n        setTimeout(()=> {\r\n            props.resetDeathAnimation();\r\n        }, 1000)\r\n    }\r\n    return (\r\n        <div className={classes.Container}>\r\n            <div className={classes.AshHolder}> \r\n            <   img className={classes.Ash} src={Ash} alt=\"ASH\"></img>\r\n                <img src={pokeball} className={ isCapturing ? classes.PokeballThrow : classes.Pokeball} alt='pokeball'/>\r\n            </div> \r\n            <div className={classes.HitPoints}>{hitPointsdivs.map(element => element)}</div>\r\n            <img src={battleSource} className={props.isPokemonDying ? classes.PokemonDying : classes.Pokemon} alt=\"BattlePokemon\"></img>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToprops = state => {\r\n    return {\r\n        pokemonArray: state.pkmnhldrrdcr.pokemonArray,\r\n        hitPoints: state.htpntsrdcr.hitPoints,\r\n        isPokemonDying: state.nmtnsrdcr.killMyPokemonAnimation\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        killMyBattlePokemon: (pokemon) => dispatch({type: actionTypes.KILL_MY_BATTLE_POKEMON, pokemon: pokemon }),\r\n        resetDeathAnimation: () => dispatch({type: actionTypes.RESET_DEATH_ANIMATION})\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToprops, mapDispatchToProps)(MyBattlePokemon)","import classes from './MyPokemon.module.css';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux'\r\n\r\nconst MyPokemon = (props) => {\r\n    let MyPokemonArray = [];\r\n\r\n    props.pokemonArray.forEach(element => {\r\n        if(element.control === 'alive') {\r\n            MyPokemonArray.push(element)\r\n        }\r\n    });\r\n    return (\r\n        <div className={classes.Container}>\r\n            \r\n                {MyPokemonArray.map((element) => {\r\n                    return (\r\n                        <div key={element.key} className={classes.ImageDiv} >\r\n                            <img className={classes.Image} src={element.pathway} alt={element.pathway}></img>\r\n                        </div>\r\n                    )\r\n                })}\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        pokemonArray: state.pkmnhldrrdcr.pokemonArray\r\n    } \r\n}\r\n\r\nexport default connect(mapStateToProps)(MyPokemon)","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classes from './WordBox.module.css'\r\nimport AnswerWords from '../../Reusables/AnswerWordsArray/AnswerWordsArray';\r\nimport * as actionTypes from '../../../store/actionTypes/actionTypes';\r\n\r\nconst WordBox = (props) => {\r\n\r\n\r\n    let clickedLetters = props.clickedLetters\r\n\r\n    \r\n\r\n\r\n        \r\n\r\n    let AnswerWord = AnswerWords[props.number].split('')\r\n    let clickedLettersString = clickedLetters.join('')\r\n    \r\n    \r\n    useEffect(() => {\r\n        let isSolved = true\r\n\r\n    \r\n    AnswerWord.forEach((element) => {\r\n        if(!clickedLettersString.includes(element)) {\r\n            isSolved = false            \r\n        }\r\n\r\n        \r\n    }, [])\r\n    if(isSolved) {\r\n        props.capturePokemonAnimation();\r\n        props.solved()\r\n        \r\n        setTimeout(()=>{\r\n            props.changeWildPokemon();\r\n        }, 2000)\r\n        setTimeout(()=>{\r\n            props.wordWasChanged();\r\n        }, 6000)\r\n        console.log('WORd Box Fired solve')\r\n        \r\n    }\r\n    })\r\n    \r\n\r\n    \r\n\r\n    return (\r\n        <div className={classes.Container}>\r\n            {AnswerWord.map((element, index) => {\r\n                let show = false\r\n                clickedLetters.forEach((ele) => {\r\n                    if(element.includes(ele)) {\r\n                        show = true\r\n                    }\r\n                })\r\n\r\n                return (\r\n                    <div key={element + index} className={classes.LetterBox} style={{\r\n                        fontSize: show ? \"40px\" : \"0px\" \r\n                    }}>\r\n                        {element}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        number: state.crrntnmbrrdcr.number,\r\n        clickedLetters: state.clckdlttrsrdcr.clickedLetters\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        solved: () => dispatch({type: actionTypes.CHANGE_WORD}),\r\n        wordWasChanged: () => dispatch({type: actionTypes.WORD_CHANGED}),\r\n        capturePokemonAnimation: () => dispatch({type: actionTypes.CAPTURE_POKEMON_ANIMATION}),\r\n        changeWildPokemon: () => dispatch({type: actionTypes.CHANGE_WILD_POKEMON})\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WordBox)","import React, { Fragment, useEffect, useState } from 'react';\r\nimport EnemyBattlePokemon from './Components/EnemyBattlePokemon/EnemyBattlePokemon';\r\nimport LetterBank from './Components/LetterBank/LetterBank';\r\nimport MyBattlePokemon from './Components/MyBattlePokemon/MyBattlePokemon';\r\nimport MyPokemon from './Components/MyPokemon/MyPokemon';\r\nimport WordBox from './Components/WordBox/WordBox';\r\nimport classes from './PokemonHangman.module.css';\r\nimport {useDispatch, useSelector } from 'react-redux';\r\nimport Victory from '../Pictures/Victory.png'\r\nimport Defeat from '../Pictures/Defeat.png'\r\n\r\n\r\n\r\nconst PokemonHangman = () => {\r\n    const dispatch = useDispatch();\r\n    const pokemonArray = useSelector(state => state.pkmnhldrrdcr.pokemonArray)\r\n    const isWordChanging = useSelector(state => state.wrdchngngrdcr.isWordChanging)\r\n  \r\n    let wildPokemonArray = []\r\n    let alivePokemonArray = []\r\n    pokemonArray.forEach(element => {\r\n        console.log('[PokemonHangman]  :  ' + element.control)\r\n        if(element.control === 'alive' || element.control === 'current') {\r\n            alivePokemonArray.push(element)\r\n        }\r\n        if(element.control === 'wild' || element.control ==='wildCurrent') {\r\n            wildPokemonArray.push(element)\r\n        }\r\n\r\n    });\r\n    \r\n\r\n    const [letter, setLetter] = useState('')\r\n\r\n    \r\n        useEffect(() => {\r\n            let fireHandler = (e) => {\r\n            \r\n                setLetter(e.key)\r\n                \r\n                setTimeout(()=>{\r\n                    setLetter('')\r\n                }, 1)\r\n            } \r\n            document.addEventListener('keypress', fireHandler)\r\n        }, [])\r\n        \r\n    let game = null\r\n    let screenBleed = isWordChanging ? <div className={classes.ScreenBleed}></div> : null\r\n    let letterBankDiv = isWordChanging ? <div></div> : <LetterBank Fire={letter} />\r\n\r\n    const gameIsOngoing =<div className={classes.PokemonHangmanBody}>\r\n                            <MyPokemon />\r\n                            <WordBox />\r\n                            <MyBattlePokemon />\r\n                            <EnemyBattlePokemon />\r\n                            {letterBankDiv}\r\n                            {screenBleed}\r\n                        </div>\r\n\r\n    const gameIsWon =   <div className={classes.Victory}>\r\n                                <img src={Victory} />\r\n                                <p>Victory!</p>\r\n                        </div>\r\n    const gameIsLost = <div className={classes.Defeat}>\r\n                            <img src={Defeat} />\r\n                            <p>Defeat!</p>\r\n                        </div>\r\n        if(wildPokemonArray.length === 0) {\r\n            game = gameIsWon\r\n        } else if (alivePokemonArray.length === 0) {\r\n            game = gameIsLost\r\n        } else { \r\n            game = gameIsOngoing\r\n        }\r\n\r\n    \r\n    return (\r\n        <Fragment>\r\n           {game}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default PokemonHangman","import React from 'react';\nimport './App.css';\nimport PokemonHangman from './PokemonHangman/PokemonHangman';\n\nfunction App() {\n  return (\n    <PokemonHangman />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actionTypes/actionTypes';\r\nimport Pokeball from '../../Pictures/Pokeball.png'\r\nimport Beedrill from '../../Pictures/Beedrill.png'\r\nimport Bulbasaur from '../../Pictures/Bulbasaur.png'\r\nimport Charmander from '../../Pictures/Charmander.png'\r\nimport Growlithe from '../../Pictures/Growlithe.png'\r\nimport Haunter from '../../Pictures/Haunter.png'\r\nimport Meowth from '../../Pictures/Meowth.png'\r\nimport Pidgeotto from '../../Pictures/Pidgeotto.png'\r\nimport Pikachu from '../../Pictures/Pikachu.png'\r\nimport Raticate from '../../Pictures/Raticate.png'\r\nimport Sandshrew from '../../Pictures/Sandshrew.png'\r\nimport Squirtle from '../../Pictures/Squirtle.png'\r\nimport Gyarados from '../../Pictures/Gyarados.png'\r\nimport Dragonite from '../../Pictures/Dragonite.png'\r\nimport Mewtwo from '../../Pictures/Mewtwo.png'\r\nimport Rhydon from '../../Pictures/Rhydon.png'\r\n\r\n\r\n\r\nconst initialState = {\r\n    pokemonArray: [\r\n        \r\n        {\r\n            pathway: Pokeball,\r\n            key: 'Pokeball',\r\n            control: 'dead',\r\n            type: 'none'\r\n        },\r\n        \r\n        {\r\n            pathway: Bulbasaur,\r\n            key: 'Bulbasaur',\r\n            control: 'alive',\r\n            type: 'grass'\r\n        },\r\n        {\r\n            pathway: Charmander,\r\n            key: 'Charmander',\r\n            control: 'current',\r\n            type: 'fire'\r\n        },\r\n        {\r\n            pathway: Growlithe,\r\n            key: 'Growlithe',\r\n            control: 'alive',\r\n            type: 'fire'\r\n        },\r\n       \r\n        \r\n        {\r\n            pathway: Pidgeotto,\r\n            key: 'Pidgeotto',\r\n            control: 'alive',\r\n            type: 'wind'\r\n        },\r\n        {\r\n            pathway: Pikachu,\r\n            key: 'Pikachu',\r\n            control: 'alive',\r\n            type: 'electricity'\r\n        },\r\n        \r\n        {\r\n            pathway: Sandshrew,\r\n            key: 'Sandshrew',\r\n            control: 'alive',\r\n            type: 'ground'\r\n        },\r\n        {\r\n            pathway: Squirtle,\r\n            key: 'Squirtle',\r\n            control: 'alive',\r\n            type: 'water'\r\n        },\r\n        {\r\n            pathway: Meowth,\r\n            key: 'Meowth',\r\n            control: 'wildCurrent',\r\n            type: 'normal'\r\n        },\r\n        {\r\n            pathway: Beedrill,\r\n            key: 'Beedrill',\r\n            control: 'wild',\r\n            type: 'grass'\r\n        },\r\n        {\r\n            pathway: Haunter,\r\n            key: 'Haunter',\r\n            control: 'wild',\r\n            type: 'ghost'\r\n        },\r\n        {\r\n            pathway: Raticate,\r\n            key: 'Raticate',\r\n            control: 'wild',\r\n            type: 'normal'\r\n        },\r\n        {\r\n            pathway: Gyarados,\r\n            key: 'Gyarados',\r\n            control: 'wild',\r\n            type: 'water'\r\n        },\r\n        {\r\n            pathway: Rhydon,\r\n            key: 'Rhydon',\r\n            control: 'wild',\r\n            type: 'ground'\r\n        },\r\n        {\r\n            pathway: Dragonite,\r\n            key: 'Dragonite',\r\n            control: 'wild',\r\n            type: 'dragon'\r\n        },\r\n        {\r\n            pathway: Mewtwo,\r\n            key: 'Mewtwo',\r\n            control: 'wild',\r\n            type: 'ghost'\r\n        },\r\n    ]\r\n}\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.KILL_MY_BATTLE_POKEMON:\r\n            let pokemonArrayCopy = [...state.pokemonArray]\r\n            let alivePokemonArray = []\r\n             pokemonArrayCopy.forEach((element) => {\r\n                 if (element.key === action.pokemon) {\r\n                     element.control = 'dead'\r\n                 }\r\n                 if(element.control === 'alive') {\r\n                     alivePokemonArray.push(element)\r\n                 }\r\n             })\r\n             if(alivePokemonArray.length >=1){\r\n                pokemonArrayCopy.forEach(element => {\r\n                    if(element.key === alivePokemonArray[0].key) {\r\n                        element.control = 'current'\r\n                    }\r\n                })\r\n             }\r\n             \r\n\r\n            return {\r\n                ...state,\r\n                pokemonArray: pokemonArrayCopy\r\n            }\r\n        break;    \r\n\r\n        case actionTypes.CHANGE_WILD_POKEMON:\r\n            let pokemonArrayCopyd = [...state.pokemonArray]\r\n            let wildPokemonArray = []\r\n             pokemonArrayCopyd.forEach((element) => {\r\n                 if (element.control === 'wildCurrent') {\r\n                     element.control = 'alive'\r\n                 }\r\n                 if(element.control === 'wild') {\r\n                     wildPokemonArray.push(element)\r\n                 }\r\n             })\r\n\r\n             if(wildPokemonArray.length >= 1) {\r\n                pokemonArrayCopyd.forEach(element => {\r\n                    if(element.key === wildPokemonArray[0].key) {\r\n                        element.control = 'wildCurrent'\r\n                    }\r\n                })\r\n             }\r\n\r\n            return {\r\n                ...state,\r\n                pokemonArray: pokemonArrayCopyd\r\n            }\r\n    \r\n        default:\r\n            break;\r\n    }\r\n    return state\r\n}\r\n\r\nexport default reducer","import * as actionTypes from '../actionTypes/actionTypes';\r\n\r\nconst initialState = {\r\n    number: 0\r\n}\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.CHANGE_WORD:\r\n            let numberCopy = state.number\r\n            numberCopy = numberCopy + 1\r\n            return {\r\n                ...state,\r\n                number: numberCopy\r\n            }\r\n    \r\n        default:\r\n            break;\r\n    }\r\n    return state\r\n}\r\n\r\nexport default reducer","import * as actionTypes from '../actionTypes/actionTypes';\r\n\r\nconst initialState = {\r\n    clickedLetters: []\r\n}\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.LETTER_CLICKED:\r\n                if(!state.clickedLetters.join('').includes(action.letter)) {\r\n                    let clickedLettersCopy = [...state.clickedLetters]\r\n                    let letterToAdd = [action.letter]\r\n                    clickedLettersCopy = clickedLettersCopy.concat(letterToAdd)\r\n                    return {\r\n                        ...state,\r\n                        clickedLetters: clickedLettersCopy\r\n                    }\r\n                }\r\n            break;\r\n        \r\n        case actionTypes.CHANGE_WORD:\r\n            return {\r\n                ...state,\r\n                clickedLetters: []\r\n            }\r\n        default:\r\n            break;\r\n    }\r\n    return state\r\n}\r\n\r\nexport default reducer","import * as actionTypes from '../actionTypes/actionTypes';\r\nconst initialState = {\r\n    hitPoints: 5\r\n}\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.REMOVE_HEART:\r\n\r\n                let hitPointsCopy = state.hitPoints - 1\r\n                return {\r\n                    ...state,\r\n                    hitPoints: hitPointsCopy\r\n                }\r\n        case actionTypes.KILL_MY_BATTLE_POKEMON:\r\n\r\n                return {\r\n                    ...state,\r\n                    hitPoints: 5\r\n                }\r\n    \r\n        default:\r\n            break;\r\n    }\r\n    return state\r\n}\r\n\r\nexport default reducer","import * as actionTypes from '../actionTypes/actionTypes';\r\n\r\nconst initialState = {\r\n    isWordChanging: false\r\n}\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.CHANGE_WORD:\r\n            \r\n            return {\r\n                ...state,\r\n                isWordChanging: true\r\n            }\r\n        \r\n        case actionTypes.WORD_CHANGED:\r\n            return {\r\n                ...state,\r\n                isWordChanging: false\r\n            }\r\n        default:\r\n            break;\r\n    }\r\n    return state\r\n}\r\n\r\nexport default reducer","import * as actionTypes from '../actionTypes/actionTypes';\r\n\r\nconst initialState = {\r\n    killMyPokemonAnimation: false,\r\n    captureWildPokemonAnimation: false,\r\n    myPokemonAttackAnimation: false,\r\n    wildPokemonAttackAnimation: false\r\n}\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.CAPTURE_POKEMON_ANIMATION:\r\n            \r\n            return {\r\n                ...state,\r\n                captureWildPokemonAnimation: true\r\n            }\r\n        \r\n        case actionTypes.WORD_CHANGED:\r\n            return {\r\n                ...state,\r\n                captureWildPokemonAnimation: false\r\n            }\r\n\r\n        case actionTypes.KILL_MY_BATTLE_POKEMON:\r\n            return {\r\n                ...state,\r\n                killMyPokemonAnimation: true\r\n            }\r\n        case actionTypes.RESET_DEATH_ANIMATION:\r\n            return {\r\n                ...state,\r\n                killMyPokemonAnimation: false\r\n            }\r\n\r\n        case actionTypes.WILD_POKEMON_ATTACK_ANIMATION:\r\n            return {\r\n                ...state,\r\n                wildPokemonAttackAnimation: true\r\n            }  \r\n            \r\n        case actionTypes.RESET_WILD_POKEMON_ATTACK_ANIMATION:\r\n            return {\r\n                ...state,\r\n                wildPokemonAttackAnimation: false\r\n            }    \r\n        case actionTypes.MY_POKEMON_ATTACK_ANIMATION:\r\n            return {\r\n                ...state,\r\n                myPokemonAttackAnimation: true\r\n            }      \r\n        case actionTypes.RESET_MY_POKEMON_ATTACK_ANIMATION:\r\n            return {\r\n                ...state,\r\n                myPokemonAttackAnimation: false\r\n            }\r\n        default:\r\n            break;\r\n    }\r\n    return state\r\n}\r\n\r\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport PokemonHolderReducer from './store/reducers/PokemonHolderReducer';\nimport currentNumberReducer from './store/reducers/currentNumberReducer';\nimport clickedLettersReducer from './store/reducers/clickedLettersReducer';\nimport hitPointsReducer from './store/reducers/hitPointsReducer';\nimport wordChangingReducer from './store/reducers/wordChangingReducer';\nimport animationsReducer from './store/reducers/animationsReducer';\n\nconst rootReducer = combineReducers({\n  pkmnhldrrdcr: PokemonHolderReducer,\n  clckdlttrsrdcr: clickedLettersReducer,\n  crrntnmbrrdcr: currentNumberReducer,\n  htpntsrdcr: hitPointsReducer,\n  wrdchngngrdcr: wordChangingReducer,\n  nmtnsrdcr: animationsReducer\n})\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} ><App /></Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}